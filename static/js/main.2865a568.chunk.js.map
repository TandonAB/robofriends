{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Main.js","serviceWorker.js","index.js"],"names":["Styles","card","width","height","overflow","background","boxShadow","border","padding","margin","display","cursor","Card","name","email","id","className","style","alt","src","CardList","robots","map","user","i","key","Style","input","maxWidth","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","scrollbarWidth","children","heading","textShadow","color","Main","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","responce","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAEMA,EAAS,CACbC,KAAM,CACJC,MAAO,QACPC,OAAQ,QACRC,SAAU,SACVC,WAAY,UACZC,UAAW,+BACXC,OAAQ,oBACRC,QAAS,OACTC,OAAQ,SACRC,QAAS,eAET,SAAU,CACRH,OAAQ,kBACRI,OAAQ,aAiCCC,EA5BF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,GAAGC,MAAOjB,EAAOC,MAC9B,yBAAKiB,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,4BACrB,6BACE,wBAAIC,UAAU,QAAQH,GACtB,uBAAGG,UAAU,8BAA8BF,MCepCM,EAvCE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLT,GAAIM,EAAOG,GAAGT,GACdF,KAAMQ,EAAOG,GAAGX,KAChBC,MAAOO,EAAOG,GAAGV,aCXzBY,EAAQ,CACbC,MAAO,CACNC,SAAU,QACVnB,OAAQ,cAkBKoB,EAdG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,yBAAKd,UAAU,cACd,2BACCA,UAAU,eACVe,KAAK,SACLC,YAAY,kBACZf,MAAOS,EAAMC,MACbM,SAAUH,MCNCI,EATA,SAACC,GAEd,OACE,yBAAKlB,MAAO,CAAEb,SAAS,SAAUgC,eAAe,OAAQjC,OAAO,QAASI,OAAO,oBAC5E4B,EAAME,WCCPX,G,MAAQ,CACbY,QAAS,CACRC,WAAY,sBACZC,MAAO,UACP,UAAW,CACVjC,OAAQ,kBACRI,OAAQ,cAiDI8B,E,YA3Cd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACZ3B,OAAQ,GACRwB,YAAa,IAJD,E,iFAQO,IAAD,OACnBI,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEvB,OAAQgC,S,+BAO/B,IAAD,EACwBC,KAAKN,MAA7B3B,EADA,EACAA,OAAQwB,EADR,EACQA,YACVU,EAAiBlC,EAAOmC,QAAO,SAAAC,GACpC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASd,EAAYa,kBAGtD,OAAQrC,EAAOuC,OAGb,yBAAK5C,UAAU,GAAGC,MAAO,CAAE4C,UAAW,WACrC,yBAAK7C,UAAU,mBACd,wBAAID,GAAG,eAAeE,MAAOS,EAAMY,SAAnC,gBAGA,kBAAC,EAAD,CAAWR,aAAcwB,KAAKZ,kBAG/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAMrB,OAAQkC,MAXf,wBAAIxC,GAAG,eAAeC,UAAU,MAAMC,MAAOS,EAAMY,SAAnD,kB,GA1BcwB,aCNCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.2865a568.chunk.js","sourcesContent":["import React from 'react';\n\nconst Styles = {\n  card: {\n    width: '250px',\n    height: '300px',\n    overflow: 'hidden',\n    background: '#ffecd2',\n    boxShadow: '0 .5rem 1rem rgba(0,0,0,.15)',\n    border: '1px solid #fc9f81',\t//#dee2e6\n    padding: '1rem',\n    margin: '0.5rem',\n    display: 'inline-block',\n\n    ':hover': {\n      border: '50px solid #000',\n      cursor: 'pointer',\n    }\n  }\n};\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='' style={Styles.card}>\n      <img alt='robots' src={`https://robohash.org/${id}?set=set5&size=150x150`} />\n      <div>\n        <h4 className=\"mt-3\">{name}</h4>\n        <p className=\"mt-0 text-danger card-text\">{email}</p>\n      </div>\n    </div>\n  );\n}\n\n/*\nfunction CardList(props) {\n  return (\n    <div className=\"\" key={robot.id} style={Styles.card}>\n      <img\n        src={`https://robohash.org/${robot.id}?set=set5`}\n        width=\"150\"\n        alt=\"robots\"\n      />\n      <h4 className=\"mt-3\">{robot.name}</h4>\n      <p className=\"mt-0 text-danger card-text\">{robot.email}</p>\n    </div>\n  );\n}\n*/\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\n/*\nfunction CardList(props) {\n\treturn (\n\t\t<>\n\t\t\t{props.robots.map(robot => (\n\t\t\t\t<div className=\"\" key={robot.id} style={Styles.card}>\n\t\t\t\t\t<img\n\t\t\t\t\t\tsrc={`https://robohash.org/${robot.id}?set=set5`}\n\t\t\t\t\t\twidth=\"150\"\n\t\t\t\t\t\talt=\"robots\"\n\t\t\t\t\t/>\n\t\t\t\t\t<h4 className=\"mt-3\">{robot.name}</h4>\n\t\t\t\t\t<p className=\"mt-0 text-danger card-text\">{robot.email}</p>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</>\n\t);\n}\n*/\n\nexport default CardList;\n","import React from \"react\";\n\nconst Style = {\n\tinput: {\n\t\tmaxWidth: '300px',\n\t\tmargin: '20px auto'\n\t}\n}\n\nconst SearchBox = ({ searchChange }) => {\n\treturn (\n\t\t<div className=\"form-group\">\n\t\t\t<input\n\t\t\t\tclassName=\"form-control\"\n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"Search Robots..\"\n\t\t\t\tstyle={Style.input}\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  // console.log(props);\n  return(\n    <div style={{ overflow:'scroll', scrollbarWidth:'none', height:'520px', border:'0px solid black' }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\nimport Card from \"./CardList\";\n// import { robots } from \"./robots\";\nimport SearchBox from \"./SearchBox\";\nimport Scroll from \"./Scroll\"\nimport './main.css'\n\nconst Style = {\n\theading: {\n\t\ttextShadow: '2px 2px 8px #FFFFFF',\n\t\tcolor: '#fc9f81',\t\t//'#fcb69f',\n\t\t'&:hover': {\n\t\t\tborder: '1px solid black',\n\t\t\tcursor: 'pointer',\n\t\t},\n\t},\n}\n\nclass Main extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(responce => responce.json())\n\t\t\t.then(users => this.setState({ robots: users }));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\t}\n\n\trender() {\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\n\t\t});\n\n\t\treturn !robots.length\n\t\t\t? <h1 id=\"main-heading\" className=\"m-4\" style={Style.heading}>Loading...</h1>\n\t\t\t: (\n\t\t\t\t<div className=\"\" style={{ textAlign: \"center\" }}>\n\t\t\t\t\t<div className=\"text-center m-3\">\n\t\t\t\t\t\t<h2 id=\"main-heading\" style={Style.heading}>\n\t\t\t\t\t\t\tRobo Friends\n\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<Card robots={filteredRobots} />\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport Main from './components/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}